{
  "title" : "Valores Compostos",
  "description" : "<div>\n  <p>\n            O objectivo deste módulo é dominar a utilização de valores compostos (<code>record</code>),\n            adquirindo noções de:\n            </p>\n  <ul>\n    <li>definição de tipos de valores compostos</li>\n    <li>alocação de valores compostos (<code>new</code>)</li>\n    <li>atributos calculados</li>\n    <li>funções de instância</li>\n    <li>vetores de valores compostos</li>\n  </ul>\n</div>\n",
  "links" : [ {
    "label" : "Slides",
    "url" : "https://docs.google.com/presentation/d/e/2PACX-1vTisfoAGenEEIQeoygCSlxRC3_C8gFmDvq3uRiZj4dNpfOU3IAaipGOu1PFH_Mmbz_9eaXYQlyIyJHa/pub?start=false&loop=false&delayms=3000"
  } ],
  "exercises" : [ {
    "id" : "range",
    "type" : "JCLASS",
    "description" : "<div>Dado o tipo de valor composto <code>Range</code> para representar um intervalo\nfechado [<em>min</em>, <em>max</em>], escreva no módulo <code>RangeUtil</code> as seguintes funções:<br><code>length</code>: devolve o número de valores do intervalo (se o mínimo for maior que o máximo, será devolvido zero);<br><code>sum</code>: devolve o somatório dos valores do intervalo;<br><code>indexes</code>: devolve o <code>Range</code> dos índices válidos de um vetor de inteiros\n(perante um vetor vazio deverá ser devolvido [0, -1]);\n \n<code>expand</code>: devolve o <code>Range</code> que resulta da expansão de outro <code>Range</code> dado um valor inteiro\n (um valor negativo diminui o mínimo, um valor positivo aumenta o máximo).</div>\n<div><em>Exemplos:</em>\n  <ul>\n    <li><a href=\"#\" class=\"example\" invocation=\"length(new Range(0, 9))\"'>length</a>(new Range(0, 9)) &rarr; 10</li>\n    <li><a href=\"#\" class=\"example\" invocation=\"sum(new Range(1, 5))\"'>sum</a>(new Range(1, 5)) &rarr; 15</li>\n    <li><a href=\"#\" class=\"example\" invocation=\"indexes([1,2,3])\"'>indexes</a>([1,2,3]) &rarr; Range(0, 2)</li>\n    <li><a href=\"#\" class=\"example\" invocation=\"expand(new Range(2, 4), -2)\"'>expand</a>(new Range(2, 4), -2) &rarr; Range(0, 4)</li>\n    <li><a href=\"#\" class=\"example\" invocation=\"expand(new Range(2, 4), 3)\"'>expand</a>(new Range(2, 4), 3) &rarr; Range(2, 7)</li>\n  </ul>\n</div>\n",
    "required" : true,
    "startCode" : "record Range(int min, int max) {\n\n}\n\nclass RangeUtil {\n    static int length(Range r) {\n        \n    }\n    \n}",
    "solutions" : [ "record Range(int min, int max) {\n\n}\n\nclass RangeUtil {\n    static int length(Range r) {\n        if(r.min() > r.max())\n            return 0;\n        else\n            return r.max() - r.min() + 1;\n    }\n\n    static int sum(Range r) {\n        int s = 0;\n        int i = r.min();\n        while(i <= r.max()) {\n            s = s + i;\n            i = i + 1;\n        }\n        return s;\n    }\n    \n    static Range indexes(int[] array) {\n        return new Range(0, array.length - 1);\n    }\n    \n    static Range expand(Range r, int n) {\n        if(n == 0)\n            return r;\n        else if(n < 0)\n            return new Range(r.min() + n, r.max());\n        else \n            return new Range(r.min(), r.max() + n);\n    }\n}" ],
    "freezeTop" : 5,
    "freezeBottom" : 1,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : "length",
      "args" : [ {
        "recordType" : "Range",
        "args" : [ 3, 6 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : 4
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "length",
      "args" : [ {
        "recordType" : "Range",
        "args" : [ 3, 3 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : 1
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "length",
      "args" : [ {
        "recordType" : "Range",
        "args" : [ 3, 1 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : 0
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "sum",
      "args" : [ {
        "recordType" : "Range",
        "args" : [ 3, 5 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : 12
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "sum",
      "args" : [ {
        "recordType" : "Range",
        "args" : [ 3, 2 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : 0
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "sum",
      "args" : [ {
        "recordType" : "Range",
        "args" : [ 3, 3 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : 3
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "indexes",
      "args" : [ [ 5, 6, 7, 8 ] ],
      "expected" : {
        "type" : "result",
        "value" : {
          "recordType" : "Range",
          "args" : [ 0, 3 ]
        }
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "indexes",
      "args" : [ [ ] ],
      "expected" : {
        "type" : "result",
        "value" : {
          "recordType" : "Range",
          "args" : [ 0, -1 ]
        }
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "indexes",
      "args" : [ [ 1 ] ],
      "expected" : {
        "type" : "result",
        "value" : {
          "recordType" : "Range",
          "args" : [ 0, 0 ]
        }
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "expand",
      "args" : [ {
        "recordType" : "Range",
        "args" : [ 3, 5 ]
      }, 3 ],
      "expected" : {
        "type" : "result",
        "value" : {
          "recordType" : "Range",
          "args" : [ 3, 8 ]
        }
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "expand",
      "args" : [ {
        "recordType" : "Range",
        "args" : [ 3, 5 ]
      }, -2 ],
      "expected" : {
        "type" : "result",
        "value" : {
          "recordType" : "Range",
          "args" : [ 1, 5 ]
        }
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "expand",
      "args" : [ {
        "recordType" : "Range",
        "args" : [ 3, 5 ]
      }, 0 ],
      "expected" : {
        "type" : "result",
        "value" : {
          "recordType" : "Range",
          "args" : [ 3, 5 ]
        }
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "rangeInstance",
    "type" : "JCLASS",
    "description" : "<div>Neste exercício vamos definir uma versão do tipo <code>Range</code> diferente da\nutilizada no exercício anterior, contendo apenas funções de instância (sem <code>static</code>).<br><code>isEmpty</code>: devolve verdadeiro caso o intervalo seja vazio; <br><code>length</code>: devolve o número de valores do intervalo (se o mínimo for maior que o máximo, será devolvido zero);<br><code>includes</code>: verifica se um número está incluído no intervalo;<br><code>excludes</code>: verifica se um número está excluído no intervalo;<br><code>isValidFor</code>: verifica se o intervalo é válido para os índices de um dado vetor;<br><code>contains</code>: verifica se outro intervalo está contido no intervalo;<br><code>expand</code>: devolve o <code>Range</code> que resulta da expansão de outro <code>Range</code> dado um valor inteiro\n (um valor negativo diminui o mínimo, um valor positivo aumenta o máximo).</div>\n<div><em>Exemplos:</em>\n  <ul>\n    <li>new Range(5, 4).<a href=\"#\" class=\"example\" invocation=\"new Range(5, 4).isEmpty()\"'>isEmpty</a>() &rarr; true</li>\n    <li>new Range(0, 0).<a href=\"#\" class=\"example\" invocation=\"new Range(0, 0).isEmpty()\"'>isEmpty</a>() &rarr; false</li>\n    <li>new Range(0, 9).<a href=\"#\" class=\"example\" invocation=\"new Range(0, 9).length()\"'>length</a>() &rarr; 10</li>\n    <li>new Range(1, 5).<a href=\"#\" class=\"example\" invocation=\"new Range(1, 5).includes(4)\"'>includes</a>(4) &rarr; true</li>\n    <li>new Range(1, 5).<a href=\"#\" class=\"example\" invocation=\"new Range(1, 5).excludes(0)\"'>excludes</a>(0) &rarr; true</li>\n    <li>new Range(1, 3).<a href=\"#\" class=\"example\" invocation=\"new Range(1, 3).isValidFor([1, 2, 3, 4, 5])\"'>isValidFor</a>([1, 2, 3, 4, 5]) &rarr; true</li>\n    <li>new Range(0, 7).<a href=\"#\" class=\"example\" invocation=\"new Range(0, 7).isValidFor([1, 2, 3, 4, 5])\"'>isValidFor</a>([1, 2, 3, 4, 5]) &rarr; false</li>\n    <li>new Range(1, 5).<a href=\"#\" class=\"example\" invocation=\"new Range(1, 5).contains(new Range(1, 3))\"'>contains</a>(new Range(1, 3)) &rarr; true</li>\n    <li>new Range(2, 4).<a href=\"#\" class=\"example\" invocation=\"new Range(2, 4).expand(-2)\"'>expand</a>(-2) &rarr; Range(0, 4)</li>\n    <li>new Range(2, 4).<a href=\"#\" class=\"example\" invocation=\"new Range(2, 4).expand(3)\"'>expand</a>(3) &rarr; Range(2, 7)</li>\n  </ul>\n</div>\n",
    "required" : true,
    "startCode" : "record Range(int min, int max) {\n    boolean isEmpty() {\n        // TODO\n    }\n}",
    "solutions" : [ "record Range(int min, int max) { \n    boolean isEmpty() {\n        return max < min;\n    }\n    \n    int length() {\n        if(min > max)\n            return 0;\n        else\n            return max - min + 1;\n    }\n    \n    boolean includes(int n) {\n        return n >= min && n <= max;\n    }\n    \n    boolean excludes(int n) {\n        return !includes(n);\n    }\n    \n     \n    boolean isValidFor(int[] array) {\n        return min >= 0 && max < array.length;\n    }\n    \n    boolean contains(Range r) {\n        return r.min >= min && r.max <= max;\n    }\n    \n    Range expand(int n) {\n        if(n == 0)\n            return this;\n        else if(n < 0)\n            return new Range(min + n, max);\n        else \n            return new Range(min, max + n);\n    }\n}" ],
    "freezeTop" : 1,
    "freezeBottom" : 1,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : "isEmpty",
      "args" : [ {
        "recordType" : "Range",
        "args" : [ 3, 6 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isEmpty",
      "args" : [ {
        "recordType" : "Range",
        "args" : [ 3, 3 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isEmpty",
      "args" : [ {
        "recordType" : "Range",
        "args" : [ 3, 2 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "length",
      "args" : [ {
        "recordType" : "Range",
        "args" : [ 3, 6 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : 4
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "length",
      "args" : [ {
        "recordType" : "Range",
        "args" : [ 3, 3 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : 1
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "length",
      "args" : [ {
        "recordType" : "Range",
        "args" : [ 3, 1 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : 0
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "includes",
      "args" : [ {
        "recordType" : "Range",
        "args" : [ 3, 5 ]
      }, 4 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "includes",
      "args" : [ {
        "recordType" : "Range",
        "args" : [ 3, 7 ]
      }, 8 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "includes",
      "args" : [ {
        "recordType" : "Range",
        "args" : [ 2, 2 ]
      }, 2 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "excludes",
      "args" : [ {
        "recordType" : "Range",
        "args" : [ 3, 5 ]
      }, 4 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "excludes",
      "args" : [ {
        "recordType" : "Range",
        "args" : [ 3, 7 ]
      }, 8 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "excludes",
      "args" : [ {
        "recordType" : "Range",
        "args" : [ 2, 2 ]
      }, 2 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "contains",
      "args" : [ {
        "recordType" : "Range",
        "args" : [ 3, 6 ]
      }, {
        "recordType" : "Range",
        "args" : [ 3, 4 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "contains",
      "args" : [ {
        "recordType" : "Range",
        "args" : [ 3, 7 ]
      }, {
        "recordType" : "Range",
        "args" : [ 3, 8 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "contains",
      "args" : [ {
        "recordType" : "Range",
        "args" : [ 2, 2 ]
      }, {
        "recordType" : "Range",
        "args" : [ 3, 6 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "expand",
      "args" : [ {
        "recordType" : "Range",
        "args" : [ 3, 5 ]
      }, 3 ],
      "expected" : {
        "type" : "result",
        "value" : {
          "recordType" : "Range",
          "args" : [ 3, 8 ]
        }
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "expand",
      "args" : [ {
        "recordType" : "Range",
        "args" : [ 3, 5 ]
      }, -2 ],
      "expected" : {
        "type" : "result",
        "value" : {
          "recordType" : "Range",
          "args" : [ 1, 5 ]
        }
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "expand",
      "args" : [ {
        "recordType" : "Range",
        "args" : [ 3, 5 ]
      }, 0 ],
      "expected" : {
        "type" : "result",
        "value" : {
          "recordType" : "Range",
          "args" : [ 3, 5 ]
        }
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "arrayFunctions",
    "type" : "JCLASS",
    "description" : "<div>Utilizando <code>Range</code> do exercício anterior, escreva um módulo <code>ArrayFunctions</code>\npara vetores de inteiros, com três funções:<br><code>sum</code>: calcula o somatório dos valores nos índices dados num intervalo;<br><code>subArray</code>: cria um sub-vetor constituído pelos índices de um intervalo;<br><code>valueRange</code>: calcula o intervalo de valores (mínimo e máximo) contidos num vetor;</div>\n<div><em>Exemplos:</em>\n  <ul>\n    <li><a href=\"#\" class=\"example\" invocation=\"sum([1, 2, 3, 4, 5], new Range(2, 4))\"'>sum</a>([1, 2, 3, 4, 5], new Range(2, 4)) &rarr; 12</li>\n    <li><a href=\"#\" class=\"example\" invocation=\"subArray([1, 2, 3, 4, 5], new Range(1, 3))\"'>subArray</a>([1, 2, 3, 4, 5], new Range(1, 3)) &rarr; [2, 3, 4]</li>\n    <li><a href=\"#\" class=\"example\" invocation=\"valueRange([5, 9, 3, 2, 7])\"'>valueRange</a>([5, 9, 3, 2, 7]) &rarr; Range(2, 9)</li>\n  </ul>\n</div>\n",
    "required" : true,
    "startCode" : null,
    "solutions" : [ "class ArrayFunctions {\n    static int sum(int[] array, Range range) {\n        assert range.isValidFor(array);\n        int s = 0;\n        for(int i = range.min(); i <= range.max(); i++)\n            s += array[i];\n        return s;\n    }\n    \n    static int[] subArray(int[] array, Range range) {\n        assert range.isValidFor(array);\n        int[] sub = new int[range.length()];\n        for(int i = range.min(); i <= range.max(); i++)\n            sub[i - range.min()] = array[i];\n        return sub;\n    }\n    \n    static Range valueRange(int[] array) {\n    \tif(array.length == 0)\n    \t\treturn new Range(0, -1);\n    \tint min = array[0];\n    \tint max = array[0];\n    \tfor(int i = 0; i < array.length; i++) {\n    \t\tif(array[i] < min)\n    \t\t\tmin = array[i];\n    \t\tif(array[i] > max)\n    \t\t\tmax = array[i];\n    \t}\n    \treturn new Range(min, max);\n    }\n}" ],
    "freezeTop" : 0,
    "freezeBottom" : 0,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ {
      "module" : null,
      "exercise" : "rangeInstance"
    }, {
      "module" : "m5",
      "exercise" : "arrayOrder"
    } ],
    "tests" : [ {
      "name" : "sum",
      "args" : [ [ 1, 2, 3, 4, 5, 6 ], {
        "recordType" : "Range",
        "args" : [ 2, 4 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : 12
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "sum",
      "args" : [ [ 1, 2, 3, 4, 5, 6 ], {
        "recordType" : "Range",
        "args" : [ 1, 1 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : 2
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "sum",
      "args" : [ [ 1, 2, 3, 4, 5, 6 ], {
        "recordType" : "Range",
        "args" : [ 2, 1 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : 0
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "subArray",
      "args" : [ [ 1, 2, 3, 4, 5, 6 ], {
        "recordType" : "Range",
        "args" : [ 2, 4 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : [ 3, 4, 5 ]
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "subArray",
      "args" : [ [ 1, 2, 3, 4, 5, 6 ], {
        "recordType" : "Range",
        "args" : [ 2, 2 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : [ 3 ]
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "subArray",
      "args" : [ [ 1, 2, 3, 4, 5, 6 ], {
        "recordType" : "Range",
        "args" : [ 2, 1 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : [ ]
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "valueRange",
      "args" : [ [ 8, 2, 7, 5, 5, 6 ] ],
      "expected" : {
        "type" : "result",
        "value" : {
          "recordType" : "Range",
          "args" : [ 2, 8 ]
        }
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "valueRange",
      "args" : [ [ 0, 1, 0, 0, 2, 1 ] ],
      "expected" : {
        "type" : "result",
        "value" : {
          "recordType" : "Range",
          "args" : [ 0, 2 ]
        }
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "valueRange",
      "args" : [ [ 1, 2, 7, 5, 5, 9 ] ],
      "expected" : {
        "type" : "result",
        "value" : {
          "recordType" : "Range",
          "args" : [ 1, 9 ]
        }
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "dimension",
    "type" : "JCLASS",
    "description" : "<div>Defina um tipo de valor composto <code>Dimension</code> para representar uma dimensão \n(largura <em>x</em> altura) com valores inteiros. Os valores deverão\nser obrigatoriamente positivos.<br>Deverão existir as seguintes funções de instância:<br><code>area</code>: obtém a área da dimensão;<br><code>perimeter</code>: obtém o perímetro da dimensão;<br><code>isSquare</code>: devolve verdadeiro se a largura e altura forem iguais;<br><code>isVertical</code>: devolve verdadeiro se a altura for maior que a largura;<br><code>isHorizontal</code>: devolve verdadeiro se a largura for maior que a altura;<br><code>largerThan</code>: verifica se a dimensão é maior que outra dimensão dada;<br><code>scale</code>: dado um fator (obrigatoriamente positivo), produz uma dimensão escalada.</div>\n<div><em>Exemplos:</em>\n  <ul>\n    <li>new Dimension(100, 50).<a href=\"#\" class=\"example\" invocation=\"new Dimension(100, 50).area()\"'>area</a>() &rarr; 5000</li>\n    <li>new Dimension(100, 50).<a href=\"#\" class=\"example\" invocation=\"new Dimension(100, 50).perimeter()\"'>perimeter</a>() &rarr; 300</li>\n    <li>new Dimension(50, 50).<a href=\"#\" class=\"example\" invocation=\"new Dimension(50, 50).isSquare()\"'>isSquare</a>() &rarr; true</li>\n    <li>new Dimension(100, 50).<a href=\"#\" class=\"example\" invocation=\"new Dimension(100, 50).isVertical()\"'>isVertical</a>() &rarr; false</li>\n    <li>new Dimension(100, 50).<a href=\"#\" class=\"example\" invocation=\"new Dimension(100, 50).isHorizontal()\"'>isHorizontal</a>() &rarr; true</li>\n    <li>new Dimension(100, 50).<a href=\"#\" class=\"example\" invocation=\"new Dimension(100, 50).largerThan(new Dimension(70, 70))\"'>largerThan</a>(new Dimension(70, 70)) &rarr; true</li>\n    <li>new Dimension(50, 60).<a href=\"#\" class=\"example\" invocation=\"new Dimension(50, 60).scale(3)\"'>scale</a>(3) &rarr; Dimension(150, 180)</li>\n  </ul>\n</div>\n",
    "required" : true,
    "startCode" : null,
    "solutions" : [ "record Dimension(int width, int height) {\n    Dimension {\n        assert width > 0;\n        assert height > 0;\n    }\n\n    int area() {\n        return width * height;\n    }\n    \n    int perimeter() {\n        return width * 2 + height * 2;\n    }\n    \n    boolean isSquare() {\n        return width == height;\n    }\n    \n    boolean isVertical() {\n        return height > width;\n    }\n    \n    boolean isHorizontal() {\n        return !isVertical();\n    }\n    \n    boolean largerThan(Dimension d) {\n        return area() > d.area();\n    }\n    \n    Dimension scale(int factor) {\n        assert factor > 0;\n        return new Dimension(this.width * factor, this.height * factor);\n    }\n}" ],
    "freezeTop" : 0,
    "freezeBottom" : 0,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : "area",
      "args" : [ {
        "recordType" : "Dimension",
        "args" : [ 20, 10 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : 200
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "area",
      "args" : [ {
        "recordType" : "Dimension",
        "args" : [ 10, 5 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : 50
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "perimeter",
      "args" : [ {
        "recordType" : "Dimension",
        "args" : [ 20, 10 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : 60
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "perimeter",
      "args" : [ {
        "recordType" : "Dimension",
        "args" : [ 5, 10 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : 30
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isSquare",
      "args" : [ {
        "recordType" : "Dimension",
        "args" : [ 20, 10 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isSquare",
      "args" : [ {
        "recordType" : "Dimension",
        "args" : [ 10, 10 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isVertical",
      "args" : [ {
        "recordType" : "Dimension",
        "args" : [ 20, 10 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isVertical",
      "args" : [ {
        "recordType" : "Dimension",
        "args" : [ 10, 15 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isHorizontal",
      "args" : [ {
        "recordType" : "Dimension",
        "args" : [ 20, 10 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isHorizontal",
      "args" : [ {
        "recordType" : "Dimension",
        "args" : [ 10, 15 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "largerThan",
      "args" : [ {
        "recordType" : "Dimension",
        "args" : [ 20, 10 ]
      }, {
        "recordType" : "Dimension",
        "args" : [ 15, 10 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "largerThan",
      "args" : [ {
        "recordType" : "Dimension",
        "args" : [ 20, 10 ]
      }, {
        "recordType" : "Dimension",
        "args" : [ 15, 20 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "scale",
      "args" : [ {
        "recordType" : "Dimension",
        "args" : [ 20, 10 ]
      }, 3 ],
      "expected" : {
        "type" : "result",
        "value" : {
          "recordType" : "Dimension",
          "args" : [ 60, 30 ]
        }
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "scale",
      "args" : [ {
        "recordType" : "Dimension",
        "args" : [ 20, 10 ]
      }, 1 ],
      "expected" : {
        "type" : "result",
        "value" : {
          "recordType" : "Dimension",
          "args" : [ 20, 10 ]
        }
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "position",
    "type" : "JCLASS",
    "description" : "<div>Defina um tipo de valor composto <code>Position</code> para representar uma posição\nnuma grelha com uma linha (<code>line</code>) e coluna (<code>column</code>). <br>A seguinte figura ilustra as posições numa grelha de 3 linhas por\n4 colunas. <br><br><img src='/images/week6/grid.png'><br><br>A partir de uma posição pretende-se funções para obter as posições \nacima (<code>top</code>), à direita (<code>right</code>), em baixo (<code>bottom</code>), e à esquerda (<code>left</code>).\nEstas posições relativas estão ilustradas na figura tendo em conta a\nposição (1, 1).<br><br>Pretende-se também duas funções para obter um conjunto de posições adjacentes:<br><code>adjacent</code>: devolve um vetor com as quatro posições adjacentes (diagonais não incluídas),\npela seguinte ordem: cima, direita, baixo, esquerda;<br><code>adjacentNonNegative</code>: semelhante à anterior mas sem incluir posições com linha ou coluna negativas.</div>\n<div><em>Exemplos:</em>\n  <ul>\n    <li>new Position(1, 1).<a href=\"#\" class=\"example\" invocation=\"new Position(1, 1).top()\"'>top</a>() &rarr; Position(0, 1)</li>\n    <li>new Position(1, 1).<a href=\"#\" class=\"example\" invocation=\"new Position(1, 1).right()\"'>right</a>() &rarr; Position(1, 2)</li>\n    <li>new Position(1, 1).<a href=\"#\" class=\"example\" invocation=\"new Position(1, 1).bottom()\"'>bottom</a>() &rarr; Position(2, 1)</li>\n    <li>new Position(1, 1).<a href=\"#\" class=\"example\" invocation=\"new Position(1, 1).left()\"'>left</a>() &rarr; Position(1, 0)</li>\n    <li>new Position(0, 0).<a href=\"#\" class=\"example\" invocation=\"new Position(0, 0).adjacent()\"'>adjacent</a>() &rarr; [Position(-1, 0), Position(0, 1), Position(1, 0), Position(0, -1)]</li>\n    <li>new Position(0, 0).<a href=\"#\" class=\"example\" invocation=\"new Position(0, 0).adjacentNonNegative()\"'>adjacentNonNegative</a>() &rarr; [Position(0, 1), Position(1, 0)]</li>\n  </ul>\n</div>\n",
    "required" : true,
    "startCode" : "record Position(int line, int column) {\n   \n}",
    "solutions" : [ "record Position(int line, int column) {\n    Position right() {\n        return new Position(line, column + 1);\n    }\n    \n    Position left() {\n        return new Position(line, column - 1);\n    }\n    \n    Position top() {\n        return new Position(line - 1, column);\n    }\n    \n    Position bottom() {\n        return new Position(line + 1, column);\n    }\n    \n    Position[] adjacent() {\n        return new Position[] {\n            top(), right(), bottom(), left()\n        };\n    }\n    \n    Position[] adjacentNonNegative() {\n        int len = 2;\n        if(line > 0)\n            len++;\n        if(column > 0)\n            len++;\n            \n        Position[] array = new Position[len];\n        int i = 0;\n        if(line > 0) {\n            array[i] = top();\n            i++;    \n        }\n        array[i] = right();\n        i++;\n        array[i] = bottom();\n        i++;\n        if(column > 0)\n            array[i] = left();\n        return array;\n    }\n}" ],
    "freezeTop" : 1,
    "freezeBottom" : 1,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : "top",
      "args" : [ {
        "recordType" : "Position",
        "args" : [ 3, 2 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : {
          "recordType" : "Position",
          "args" : [ 2, 2 ]
        }
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "right",
      "args" : [ {
        "recordType" : "Position",
        "args" : [ 3, 2 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : {
          "recordType" : "Position",
          "args" : [ 3, 3 ]
        }
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "bottom",
      "args" : [ {
        "recordType" : "Position",
        "args" : [ 3, 2 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : {
          "recordType" : "Position",
          "args" : [ 4, 2 ]
        }
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "left",
      "args" : [ {
        "recordType" : "Position",
        "args" : [ 3, 2 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : {
          "recordType" : "Position",
          "args" : [ 3, 1 ]
        }
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "adjacent",
      "args" : [ {
        "recordType" : "Position",
        "args" : [ 3, 2 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : [ {
          "recordType" : "Position",
          "args" : [ 2, 2 ]
        }, {
          "recordType" : "Position",
          "args" : [ 3, 3 ]
        }, {
          "recordType" : "Position",
          "args" : [ 4, 2 ]
        }, {
          "recordType" : "Position",
          "args" : [ 3, 1 ]
        } ]
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "adjacentNonNegative",
      "args" : [ {
        "recordType" : "Position",
        "args" : [ 3, 2 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : [ {
          "recordType" : "Position",
          "args" : [ 2, 2 ]
        }, {
          "recordType" : "Position",
          "args" : [ 3, 3 ]
        }, {
          "recordType" : "Position",
          "args" : [ 4, 2 ]
        }, {
          "recordType" : "Position",
          "args" : [ 3, 1 ]
        } ]
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "adjacentNonNegative",
      "args" : [ {
        "recordType" : "Position",
        "args" : [ 0, 0 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : [ {
          "recordType" : "Position",
          "args" : [ 0, 1 ]
        }, {
          "recordType" : "Position",
          "args" : [ 1, 0 ]
        } ]
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "adjacentNonNegative",
      "args" : [ {
        "recordType" : "Position",
        "args" : [ 0, 1 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : [ {
          "recordType" : "Position",
          "args" : [ 0, 2 ]
        }, {
          "recordType" : "Position",
          "args" : [ 1, 1 ]
        }, {
          "recordType" : "Position",
          "args" : [ 0, 0 ]
        } ]
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "adjacentNonNegative",
      "args" : [ {
        "recordType" : "Position",
        "args" : [ 1, 0 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : [ {
          "recordType" : "Position",
          "args" : [ 0, 0 ]
        }, {
          "recordType" : "Position",
          "args" : [ 1, 1 ]
        }, {
          "recordType" : "Position",
          "args" : [ 2, 0 ]
        } ]
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "positionUtil",
    "type" : "JCLASS",
    "description" : "<div>Escreva um módulo com três funções envolvendo vetores de <code>Position</code>:<br><code>diagonal</code>: devolve <em>n</em> posições da diagonal de uma grelha,\ncomeçando em (0, 0);<br><code>positions</code>: dada uma dimensão (<code>Dimension</code>) de uma grelha, devolve um vetor com as posições\nválidas linha por linha;<br><code>contains</code>: verifica se uma posição existe num dado vetor de posições (utilizar <code>equals</code> para a verificação de igualdade);</div>\n<div><em>Exemplos:</em>\n  <ul>\n    <li><a href=\"#\" class=\"example\" invocation=\"diagonal(3)\"'>diagonal</a>(3) &rarr; [Position(0, 0), Position(1, 1), Position(2, 2)]</li>\n    <li><a href=\"#\" class=\"example\" invocation=\"positions(new Dimension(3, 2))\"'>positions</a>(new Dimension(3, 2)) &rarr; [Position(0, 0), Position(0, 1), Position(0, 2), Position(1, 0), Position(1, 1), Position(1, 2)]</li>\n    <li><a href=\"#\" class=\"example\" invocation=\"contains([new Position(1, 2), new Position(3, 2), new Position(1, 1)], new Position(3, 2))\"'>contains</a>([new Position(1, 2), new Position(3, 2), new Position(1, 1)], new Position(3, 2)) &rarr; true</li>\n  </ul>\n</div>\n",
    "required" : true,
    "startCode" : null,
    "solutions" : [ "class PositionUtil {\n   static Position[] diagonal(int n) {\n       assert n >= 0;\n       Position[] diagonal = new Position[n];\n       for(int i = 0; i < n; i++)\n           diagonal[i] = new Position(i, i);\n       return diagonal;\n   }\n   \n   static Position[] positions(Dimension dimension) {\n       Position[] positions = new Position[dimension.area()];\n       for(int i = 0; i < positions.length; i++)\n           positions[i] = new Position(i / dimension.width(), i % dimension.width());\n       return positions;\n   }\n   \n   static boolean contains(Position[] positions, Position p) {\n       for(int i = 0; i < positions.length; i++)\n           if(positions[i].equals(p))\n               return true;\n       return false;\n   }\n}" ],
    "freezeTop" : 0,
    "freezeBottom" : 0,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ {
      "module" : null,
      "exercise" : "dimension"
    }, {
      "module" : null,
      "exercise" : "position"
    } ],
    "tests" : [ {
      "name" : "diagonal",
      "args" : [ 3 ],
      "expected" : {
        "type" : "result",
        "value" : [ {
          "recordType" : "Position",
          "args" : [ 0, 0 ]
        }, {
          "recordType" : "Position",
          "args" : [ 1, 1 ]
        }, {
          "recordType" : "Position",
          "args" : [ 2, 2 ]
        } ]
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "diagonal",
      "args" : [ 1 ],
      "expected" : {
        "type" : "result",
        "value" : [ {
          "recordType" : "Position",
          "args" : [ 0, 0 ]
        } ]
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "diagonal",
      "args" : [ 0 ],
      "expected" : {
        "type" : "result",
        "value" : [ ]
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "positions",
      "args" : [ {
        "recordType" : "Dimension",
        "args" : [ 2, 3 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : [ {
          "recordType" : "Position",
          "args" : [ 0, 0 ]
        }, {
          "recordType" : "Position",
          "args" : [ 0, 1 ]
        }, {
          "recordType" : "Position",
          "args" : [ 1, 0 ]
        }, {
          "recordType" : "Position",
          "args" : [ 1, 1 ]
        }, {
          "recordType" : "Position",
          "args" : [ 2, 0 ]
        }, {
          "recordType" : "Position",
          "args" : [ 2, 1 ]
        } ]
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "positions",
      "args" : [ {
        "recordType" : "Dimension",
        "args" : [ 3, 1 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : [ {
          "recordType" : "Position",
          "args" : [ 0, 0 ]
        }, {
          "recordType" : "Position",
          "args" : [ 0, 1 ]
        }, {
          "recordType" : "Position",
          "args" : [ 0, 2 ]
        } ]
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "positions",
      "args" : [ {
        "recordType" : "Dimension",
        "args" : [ 1, 2 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : [ {
          "recordType" : "Position",
          "args" : [ 0, 0 ]
        }, {
          "recordType" : "Position",
          "args" : [ 1, 0 ]
        } ]
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "contains",
      "args" : [ [ {
        "recordType" : "Position",
        "args" : [ 1, 2 ]
      }, {
        "recordType" : "Position",
        "args" : [ 2, 3 ]
      }, {
        "recordType" : "Position",
        "args" : [ 3, 4 ]
      } ], {
        "recordType" : "Position",
        "args" : [ 2, 3 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "contains",
      "args" : [ [ {
        "recordType" : "Position",
        "args" : [ 1, 2 ]
      }, {
        "recordType" : "Position",
        "args" : [ 2, 3 ]
      }, {
        "recordType" : "Position",
        "args" : [ 3, 4 ]
      } ], {
        "recordType" : "Position",
        "args" : [ 3, 3 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "contains",
      "args" : [ [ ], {
        "recordType" : "Position",
        "args" : [ 2, 3 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "point",
    "type" : "JCLASS",
    "description" : "<div>Defina um tipo valor <code>Point</code> para representar pontos cartesianos\n(<em>x</em>, <em>y</em>) com valores reais (<code>double</code>). Deverão existir as\n seguintes funções de instância:\n \n <code>isOrigin</code>: verifica se o ponto é a origem (0.0, 0.0);\n \n <code>scale</code>: escala o ponto por um factor (<code>double</code>);\n \n <code>sum</code>(point): obtém um novo ponto resultante de somar outro ponto;\n \n <code>sum</code>(x, y): obtém um novo ponto resultante de somar os valores de <code>x</code> e <code>y</code>;\n \n <code>distance</code>: calcula a distância para outro ponto.</div>\n<div><em>Exemplos:</em>\n  <ul>\n    <li>new Point(0.0, 0.0).<a href=\"#\" class=\"example\" invocation=\"new Point(0.0, 0.0).isOrigin()\"'>isOrigin</a>() &rarr; true</li>\n    <li>new Point(1.0, 1.5).<a href=\"#\" class=\"example\" invocation=\"new Point(1.0, 1.5).scale(2.0)\"'>scale</a>(2.0) &rarr; Point(2.0, 3.0)</li>\n    <li>new Point(1.0, 1.5).<a href=\"#\" class=\"example\" invocation=\"new Point(1.0, 1.5).sum(new Point(2.0, 2.0))\"'>sum</a>(new Point(2.0, 2.0)) &rarr; Point(3.0, 3.5)</li>\n    <li>new Point(1.0, 1.5).<a href=\"#\" class=\"example\" invocation=\"new Point(1.0, 1.5).sum(3.0, 4.0)\"'>sum</a>(3.0, 4.0) &rarr; Point(4.0, 5.5)</li>\n    <li>new Point(0.0, 0.0).<a href=\"#\" class=\"example\" invocation=\"new Point(0.0, 0.0).distance(new Point(3.0, 4.0))\"'>distance</a>(new Point(3.0, 4.0)) &rarr; 5.0</li>\n  </ul>\n</div>\n",
    "required" : false,
    "startCode" : null,
    "solutions" : [ " record Point(double x, double y) {\n    boolean isOrigin() {\n        return x == 0.0 && y == 0.0;\n    }\n    \n    Point scale(double factor) {\n        return new Point(x * factor, y * factor);\n    }\n    \n    Point sum(Point p) {\n        return p.isOrigin() ? this : new Point(x + p.x, y + p.y);\n    }\n    \n    Point sum(double x, double y) {\n        return x == 0.0 && y == 0.0 ? this : new Point(this.x + x, this.y + y);\n    }\n    \n    double distance(Point p) {\n        return Math.sqrt(Math.pow(x - p.x, 2) + Math.pow(y - p.y, 2));\n    }\n}" ],
    "freezeTop" : 0,
    "freezeBottom" : 0,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : "isOrigin",
      "args" : [ {
        "recordType" : "Point",
        "args" : [ 0.0, 0.0 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isOrigin",
      "args" : [ {
        "recordType" : "Point",
        "args" : [ 0.3, 0.0 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "sum",
      "args" : [ {
        "recordType" : "Point",
        "args" : [ 1.0, 2.0 ]
      }, {
        "recordType" : "Point",
        "args" : [ 5.0, 1.0 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : {
          "recordType" : "Point",
          "args" : [ 6.0, 3.0 ]
        }
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "sum",
      "args" : [ {
        "recordType" : "Point",
        "args" : [ 1.0, 2.0 ]
      }, {
        "recordType" : "Point",
        "args" : [ 0.0, 0.0 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : {
          "recordType" : "Point",
          "args" : [ 1.0, 2.0 ]
        }
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "scale",
      "args" : [ {
        "recordType" : "Point",
        "args" : [ 1.0, 2.0 ]
      }, 2.0 ],
      "expected" : {
        "type" : "result",
        "value" : {
          "recordType" : "Point",
          "args" : [ 2.0, 4.0 ]
        }
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "scale",
      "args" : [ {
        "recordType" : "Point",
        "args" : [ 1.0, 2.0 ]
      }, 2.5 ],
      "expected" : {
        "type" : "result",
        "value" : {
          "recordType" : "Point",
          "args" : [ 2.5, 5.0 ]
        }
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "distance",
      "args" : [ {
        "recordType" : "Point",
        "args" : [ 1.0, 2.0 ]
      }, {
        "recordType" : "Point",
        "args" : [ 3.0, 3.0 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : 2.236
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "distance",
      "args" : [ {
        "recordType" : "Point",
        "args" : [ 0.0, 0.0 ]
      }, {
        "recordType" : "Point",
        "args" : [ 3.0, 4.0 ]
      } ],
      "expected" : {
        "type" : "result",
        "value" : 5.0
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  } ]
}
