{
  "title" : "Funções e Expressões",
  "description" : "<div>\n  <p>O objectivo deste módulo é dominar a definição de funções simples sem algoritmo,\nadquirindo noções de:</p>\n  <ul>\n    <li>função\n      <ul>\n        <li>parâmetro</li>\n        <li>argumento</li>\n      </ul>\n    </li>\n    <li>expressão\n      <ul>\n        <li>operadores aritméticos (+, -, *, /, %)</li>\n        <li>operadores relacionais (==, !=, &lt;, &lt;=, &gt;, &gt;=)</li>\n        <li>operadores lógicos (&amp;&amp;, ||, ^, !)</li>\n        <li>expressão condicional</li>\n      </ul>\n    </li>\n  </ul>\n</div>\n",
  "links" : [ {
    "label" : "Slides",
    "url" : "https://docs.google.com/presentation/d/1bkFxbnnH3I5xHfkXqIn2IXwEn4mfassPKzY_XGQAVdA/pub"
  } ],
  "exercises" : [ {
    "id" : "next",
    "type" : "JFUNCTION",
    "description" : "<div>O seguinte código ilustra a sintaxe elementar para definir funções. Ao experimentar executar por exemplo <code>next(4)</code> irá ser devolvido o mesmo número (4). \nAltere o código para que seja devolvido o número seguinte ao fornecido para o parâmetro <code>n</code> (5 para o exemplo dado).</div>\n",
    "required" : true,
    "startCode" : "int next(int n) {\n    return n;\n}",
    "solutions" : [ "int next(int n) {\n    return n+1;\n}" ],
    "freezeTop" : 1,
    "freezeBottom" : 1,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : "next",
      "args" : [ 4 ],
      "expected" : {
        "type" : "result",
        "value" : 5
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "next",
      "args" : [ 6 ],
      "expected" : {
        "type" : "result",
        "value" : 7
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "next",
      "args" : [ -1 ],
      "expected" : {
        "type" : "result",
        "value" : 0
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "previous",
    "type" : "JFUNCTION",
    "description" : "<div>Complete a função para que seja devolvido o número anterior ao passado como argumento.</div>\n",
    "required" : true,
    "startCode" : "int previous(int n) {\n     \n}",
    "solutions" : [ "int previous(int n) {\n    return n-1;        \n}" ],
    "freezeTop" : 1,
    "freezeBottom" : 1,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : "previous",
      "args" : [ 4 ],
      "expected" : {
        "type" : "result",
        "value" : 3
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "previous",
      "args" : [ 10 ],
      "expected" : {
        "type" : "result",
        "value" : 9
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "previous",
      "args" : [ 0 ],
      "expected" : {
        "type" : "result",
        "value" : -1
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "doubleOf",
    "type" : "JFUNCTION",
    "description" : "<div>Escreva uma função para calcular o dobro de um número real (parâmetro <code>n</code>).</div>\n",
    "required" : true,
    "startCode" : "double doubleOf(double n) {\n    \n}",
    "solutions" : [ "double doubleOf(double n) {\n      return n * 2;\n}" ],
    "freezeTop" : 1,
    "freezeBottom" : 1,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : "doubleOf",
      "args" : [ 2.3 ],
      "expected" : {
        "type" : "result",
        "value" : 4.6
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "doubleOf",
      "args" : [ 110.5 ],
      "expected" : {
        "type" : "result",
        "value" : 221.0
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "square",
    "type" : "JFUNCTION",
    "description" : "<div>Escreva uma função com nome <code>square</code> para calcular o quadrado de um número inteiro.</div>\n",
    "required" : true,
    "startCode" : null,
    "solutions" : [ "int square(int n) {\n      return n * n;\n}" ],
    "freezeTop" : 0,
    "freezeBottom" : 0,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : "square",
      "args" : [ 2 ],
      "expected" : {
        "type" : "result",
        "value" : 4
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "square",
      "args" : [ 3 ],
      "expected" : {
        "type" : "result",
        "value" : 9
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "square",
      "args" : [ 6 ],
      "expected" : {
        "type" : "result",
        "value" : 36
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "square",
      "args" : [ -2 ],
      "expected" : {
        "type" : "result",
        "value" : 4
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "difference",
    "type" : "JFUNCTION",
    "description" : "<div>Complete a função para calcular a diferença entre dois números.</div>\n",
    "required" : true,
    "startCode" : "int difference(int a, int b) {\n\n}",
    "solutions" : [ "int difference(int a, int b) {\n    return a - b;\n}" ],
    "freezeTop" : 1,
    "freezeBottom" : 1,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : "difference",
      "args" : [ 10, 4 ],
      "expected" : {
        "type" : "result",
        "value" : 6
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "difference",
      "args" : [ 3, 6 ],
      "expected" : {
        "type" : "result",
        "value" : -3
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "average",
    "type" : "JFUNCTION",
    "description" : "<div>Escreva uma função para calcular a média de dois números reais (<code>double</code>).</div>\n",
    "required" : true,
    "startCode" : null,
    "solutions" : [ "double average(double a, double b) {\n    return (a + b) / 2;\n}" ],
    "freezeTop" : 0,
    "freezeBottom" : 0,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : null,
      "args" : [ 10.6, 11.0 ],
      "expected" : {
        "type" : "result",
        "value" : 10.8
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : null,
      "args" : [ 12.3, 13.5 ],
      "expected" : {
        "type" : "result",
        "value" : 12.9
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "averageInt",
    "type" : "JFUNCTION",
    "description" : "<div>Escreva uma função para calcular a média de dois números inteiros.</div>\n",
    "required" : true,
    "startCode" : "double average(int a, int b) {\n\n}",
    "solutions" : [ "double average(int a, int b) {\n    return (a + b) / 2.0;\n}" ],
    "freezeTop" : 1,
    "freezeBottom" : 1,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : "average",
      "args" : [ 10, 11 ],
      "expected" : {
        "type" : "result",
        "value" : 10.5
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "average",
      "args" : [ 12, 16 ],
      "expected" : {
        "type" : "result",
        "value" : 14.0
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "round",
    "type" : "JFUNCTION",
    "description" : "<div>Pretende-se uma função para obter arredondamentos (excesso/defeito).\nA seguinte implementação faz uma <i>truncagem</i> de um número inteiro, experimente executar <code>round(4.9)</code>. \nAltere o código tendo em conta o objetivo.</div>\n",
    "required" : false,
    "startCode" : "int round(double n) {\n    return (int) n;\n}",
    "solutions" : [ "int round(double n) {\n    return (int) (n + 0.5);\n}" ],
    "freezeTop" : 1,
    "freezeBottom" : 1,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : "round",
      "args" : [ 5.4 ],
      "expected" : {
        "type" : "result",
        "value" : 5
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "round",
      "args" : [ 5.6 ],
      "expected" : {
        "type" : "result",
        "value" : 6
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "isNegative",
    "type" : "JFUNCTION",
    "description" : "<div>Pretende-se que a seguinte função indique se um número é negativo (verdadeiro/falso). \nO código tem um erro de compilação e um erro lógico. O objetivo é corrigir os erros.</div>\n",
    "required" : true,
    "startCode" : "boolean isNegative(int x) {\n    return n > 0;\n}",
    "solutions" : [ "boolean isNegative(int x) {\n    return x < 0;\n}" ],
    "freezeTop" : 1,
    "freezeBottom" : 1,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : "isNegative",
      "args" : [ -4 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isNegative",
      "args" : [ 0 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isNegative",
      "args" : [ 2 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "isDigit",
    "type" : "JFUNCTION",
    "description" : "<div>Escreva uma função para determinar se um número é um dígito (i.e., está no intervalo [0-9]).</div>\n",
    "required" : true,
    "startCode" : null,
    "solutions" : [ "boolean isDigit(int n) {\n    return n >= 0 && n <= 9;\n}" ],
    "freezeTop" : 0,
    "freezeBottom" : 0,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : null,
      "args" : [ 2 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : null,
      "args" : [ 0 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : null,
      "args" : [ 9 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : null,
      "args" : [ 10 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : null,
      "args" : [ -1 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : null,
      "args" : [ 50 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : null,
      "args" : [ -100 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "isEven",
    "type" : "JFUNCTION",
    "description" : "<div>Escreva uma função <code>isEven</code> para determinar se um número é par.</div>\n",
    "required" : true,
    "startCode" : null,
    "solutions" : [ "boolean isEven(int n) {\n    return n % 2 == 0;\n}" ],
    "freezeTop" : 0,
    "freezeBottom" : 0,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : "isEven",
      "args" : [ 5 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isEven",
      "args" : [ -3 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isEven",
      "args" : [ 0 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isEven",
      "args" : [ 4 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "isOdd",
    "type" : "JFUNCTION",
    "description" : "<div>Escreva uma função <code>isOdd</code> para determinar se um número é ímpar.</div>\n",
    "required" : true,
    "startCode" : null,
    "solutions" : [ "boolean isOdd(int n) {\n    return n % 2 != 0;\n}" ],
    "freezeTop" : 0,
    "freezeBottom" : 0,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : "isOdd",
      "args" : [ 5 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isOdd",
      "args" : [ -3 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isOdd",
      "args" : [ 0 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isOdd",
      "args" : [ 4 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "abs",
    "type" : "JFUNCTION",
    "description" : "<div>Escreva uma função <code>abs</code> para obter o valor absoluto de um número real,\nutilizando uma expressão condicional.<br>(<code>cond ? trueValue : falseValue</code>)</div>\n",
    "required" : true,
    "startCode" : null,
    "solutions" : [ "double abs(double n) {\n    return n < 0 ? -n : n;\n}" ],
    "freezeTop" : 0,
    "freezeBottom" : 0,
    "exclude" : [ "IF" ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : "abs",
      "args" : [ -2.5 ],
      "expected" : {
        "type" : "result",
        "value" : 2.5
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "abs",
      "args" : [ 1.3 ],
      "expected" : {
        "type" : "result",
        "value" : 1.3
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "abs",
      "args" : [ 0.0 ],
      "expected" : {
        "type" : "result",
        "value" : 0.0
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "min",
    "type" : "JFUNCTION",
    "description" : "<div>Escreva uma função <code>min</code> para obter o valor mínimo entre dois números reais,\nutilizando uma expressão condicional.</div>\n",
    "required" : true,
    "startCode" : null,
    "solutions" : [ "double min(double a, double b) {\n     return a < b ? a : b;\n }" ],
    "freezeTop" : 0,
    "freezeBottom" : 0,
    "exclude" : [ "IF" ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : "min",
      "args" : [ -2.0, 4.3 ],
      "expected" : {
        "type" : "result",
        "value" : -2.0
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "min",
      "args" : [ 3.1, 4.4 ],
      "expected" : {
        "type" : "result",
        "value" : 3.1
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "min",
      "args" : [ 6.6, -1.0 ],
      "expected" : {
        "type" : "result",
        "value" : -1.0
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "min",
      "args" : [ -2.2, -1.5 ],
      "expected" : {
        "type" : "result",
        "value" : -2.2
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "sumNaturals",
    "type" : "JFUNCTION",
    "description" : "<div>Escreva uma função para calcular a soma dos primeiros <em>n</em> números\nnaturais, segundo a seguinte fórmula.<br><br><img src='https://wikimedia.org/api/rest_v1/media/math/render/svg/956e6e212a3c2b7a352b988640a7e67a0dea5727'></div>\n",
    "required" : true,
    "startCode" : null,
    "solutions" : [ "int sumNaturals(int max) {\n    return max * (max + 1) / 2;    \n}" ],
    "freezeTop" : 0,
    "freezeBottom" : 0,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : null,
      "args" : [ 1 ],
      "expected" : {
        "type" : "result",
        "value" : 1
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : null,
      "args" : [ 2 ],
      "expected" : {
        "type" : "result",
        "value" : 3
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : null,
      "args" : [ 3 ],
      "expected" : {
        "type" : "result",
        "value" : 6
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : null,
      "args" : [ 5 ],
      "expected" : {
        "type" : "result",
        "value" : 15
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : null,
      "args" : [ 7 ],
      "expected" : {
        "type" : "result",
        "value" : 28
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "isVowel",
    "type" : "JFUNCTION",
    "description" : "<div>Escreva uma função para determinar se um carácter (<code>char</code>) corresponde a uma vogal minúscula.</div>\n",
    "required" : false,
    "startCode" : "boolean isVowel(char c) {\n\n}",
    "solutions" : [ "boolean isVowel(char c) {\n     return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'; \n }" ],
    "freezeTop" : 1,
    "freezeBottom" : 1,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : "isVowel",
      "args" : [ "a" ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isVowel",
      "args" : [ "e" ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isVowel",
      "args" : [ "i" ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isVowel",
      "args" : [ "o" ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isVowel",
      "args" : [ "u" ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isVowel",
      "args" : [ "A" ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isVowel",
      "args" : [ "c" ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isVowel",
      "args" : [ "7" ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "inOrder",
    "type" : "JFUNCTION",
    "description" : "<div>Escreva uma função para determinar se três números inteiros estão por ordem estritamente crescente (não podem haver repetidos).</div>\n",
    "required" : true,
    "startCode" : null,
    "solutions" : [ "boolean inOrder(int a, int b, int c) {\n    return a < b && b < c;\n}" ],
    "freezeTop" : 0,
    "freezeBottom" : 0,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : "inOrder",
      "args" : [ 1, 2, 3 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "inOrder",
      "args" : [ 2, 2, 4 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "inOrder",
      "args" : [ 0, 2, 4 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "inOrder",
      "args" : [ 1, 0, 3 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "inOrder",
      "args" : [ 1, 2, 0 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "isIncluded",
    "type" : "JFUNCTION",
    "description" : "<div>Escreva uma função para determinar se um número inteiro está incluído num dado intervalo (fechado, de inteiros).\nO primeiro parâmetro corresponderá ao número a verificar (<code>n</code>), \ne outros dois ao intervalo [<code>min</code>, <code>max</code>].</div>\n",
    "required" : true,
    "startCode" : "boolean isIncluded(int n, int min, int max) {\n\n}",
    "solutions" : [ "boolean isIncluded(int n, int min, int max) {\n     return n >= min && n <= max;\n }" ],
    "freezeTop" : 1,
    "freezeBottom" : 1,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : "isIncluded",
      "args" : [ 1, 2, 3 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isIncluded",
      "args" : [ 2, 2, 4 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isIncluded",
      "args" : [ 6, 2, 6 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isIncluded",
      "args" : [ -1, 0, 3 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isIncluded",
      "args" : [ 1, 10, 0 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "isExcluded",
    "type" : "JFUNCTION",
    "description" : "<div>Escreva uma função para determinar se um número inteiro está excluído de um dado intervalo (de inteiros, fechado).\nO primeiro parâmetro corresponderá ao número a verificar, \ne outros dois ao intervalo.</div>\n",
    "required" : true,
    "startCode" : null,
    "solutions" : [ "boolean isExcluded(int n, int min, int max) {\n     return n < min || n > max;\n }" ],
    "freezeTop" : 0,
    "freezeBottom" : 0,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : null,
      "args" : [ 4, 4, 9 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : null,
      "args" : [ 3, 4, 9 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : null,
      "args" : [ 6, 2, 6 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : null,
      "args" : [ -1, 0, 3 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : null,
      "args" : [ 1, 10, 0 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "xor",
    "type" : "JFUNCTION",
    "description" : "<div>         Complete a função para calcular a operação lógica disjunção exclusiva (XOR) entre dois valores booleanos, \n         sem utilizar o operador <code>^</code>.\n<table class='table table-striped' style='width:150px'>\n   <tr>\n        <th>a</th><th>b</th><th>XOR</th>\n        </tr>\n    <tr>\n        <td>true</td><td>true</td><td>false</td>\n    </tr>\n    <tr>\n        <td>true</td><td>false</td><td>true</td>\n    </tr>\n    <tr>\n        <td>false</td><td>true</td><td>true</td>\n    </tr>\n    <tr>\n        <td>false</td><td>false</td><td>false</td>\n    </tr>\n</table></div>\n",
    "required" : false,
    "startCode" : "boolean xor(boolean a, boolean b) {\n\n}",
    "solutions" : [ "boolean xor(boolean a, boolean b) {\n    return a != b;\n}" ],
    "freezeTop" : 1,
    "freezeBottom" : 1,
    "exclude" : [ "XOR" ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : "xor",
      "args" : [ true, true ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "xor",
      "args" : [ true, false ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "xor",
      "args" : [ false, true ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "xor",
      "args" : [ false, false ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "sameSign",
    "type" : "JFUNCTION",
    "description" : "<div>Escreva uma função para determinar se dois números inteiros têm o mesmo sinal (i.e. são ambos positivos ou negativos).\nConsidere que zero não é positivo nem negativo (não tem sinal), e logo, quando há um zero nos valores, a resposta será sempre falsa.</div>\n",
    "required" : false,
    "startCode" : null,
    "solutions" : [ "boolean sameSign(int a, int b) {\n     return a < 0 && b < 0 || a > 0 && b > 0;\n }" ],
    "freezeTop" : 0,
    "freezeBottom" : 0,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : null,
      "args" : [ 1, 3 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : null,
      "args" : [ 3, 3 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : null,
      "args" : [ 0, 3 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : null,
      "args" : [ 3, 0 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : null,
      "args" : [ -1, -5 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : null,
      "args" : [ -2, 5 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "onlyOnePositive",
    "type" : "JFUNCTION",
    "description" : "<div>Escreva uma função para determinar se entre dois números inteiros apenas um é positivo.</div>\n",
    "required" : false,
    "startCode" : null,
    "solutions" : [ "boolean onlyOnePositive(int a, int b) {\n     return a > 0 ^ b > 0;\n }" ],
    "freezeTop" : 0,
    "freezeBottom" : 0,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : null,
      "args" : [ -2, 4 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : null,
      "args" : [ 3, 4 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : null,
      "args" : [ 6, -1 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : null,
      "args" : [ -2, -1 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "staticModule",
    "type" : "JCLASS",
    "description" : "<div>Inclua no seguinte módulo as funções <code>min</code> e <code>inOrder</code> escritas anteriormente, \nutilizando o modificador <code>static</code> à semelhança do exemplo.</div>\n",
    "required" : true,
    "startCode" : "class Util {\n     static double max(double a, double b) {\n         return a > b ? a : b;\n     }\n     \n}",
    "solutions" : [ "class Util {\n     static double max(double a, double b) {\n         return a > b ? a : b;\n     }\n     static double min(double a, double b) {\n         return a < b ? a : b;\n     }\n     static boolean inOrder(int a, int b, int c) {\n         return a < b && b < c;\n     } \n}" ],
    "freezeTop" : 4,
    "freezeBottom" : 1,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : "min",
      "args" : [ 2.1, 4.2 ],
      "expected" : {
        "type" : "result",
        "value" : 2.1
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "inOrder",
      "args" : [ 1, 2, 3 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  } ]
}
