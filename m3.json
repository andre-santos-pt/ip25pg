{
  "title" : "Funções Dependentes",
  "description" : "<div>O objectivo deste módulo é dominar a invocação de funções e a decomposição\nfuncional de um problema.<br>Será também praticada a utilização de funções do módulo <code>Math</code> (<code>java.util</code>).</div>\n",
  "links" : [ {
    "label" : "Slides",
    "url" : "https://docs.google.com/presentation/d/1hgzeI8cQ2dkW2_SjnMTs8jYsjk42xmav5Dqh6utsit4/pub?start=false&loop=false&delayms=3000"
  }, {
    "label" : "java.lang.Math",
    "url" : "https://docs.oracle.com/javase/8/docs/api/?java/lang/Math.html"
  } ],
  "exercises" : [ {
    "id" : "oddIsNotEven",
    "type" : "JCLASS",
    "description" : "<div>Escreva uma função <code>isOdd</code> para verificar se um número é ímpar, invocando a função <code>isEven</code> dada.</div>\n",
    "required" : true,
    "startCode" : "class EvenOdd {\n    static boolean isEven(int n) {\n        return n % 2 == 0;\n    }\n\n}",
    "solutions" : [ "class EvenOdd {\n    static boolean isEven(int n) {\n        return n % 2 == 0;\n    }\n    static boolean isOdd(int n) {\n        return !isEven(n);\n    }\n}" ],
    "freezeTop" : 4,
    "freezeBottom" : 1,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : "isOdd",
      "args" : [ 7 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ {
        "module" : null,
        "procedure" : "isEven",
        "count" : 1
      } ],
      "checkVars" : [ ],
      "needsListener" : true
    }, {
      "name" : "isOdd",
      "args" : [ 10 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ {
        "module" : null,
        "procedure" : "isEven",
        "count" : 1
      } ],
      "checkVars" : [ ],
      "needsListener" : true
    }, {
      "name" : "isOdd",
      "args" : [ 13 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ {
        "module" : null,
        "procedure" : "isEven",
        "count" : 1
      } ],
      "checkVars" : [ ],
      "needsListener" : true
    } ]
  }, {
    "id" : "randomInts",
    "type" : "JCLASS",
    "description" : "<div>A seguinte função gera um número inteiro aleatório no intervalo [0, 1000000[,\nutilizando a função <code>random</code> do módulo <code>Math</code> (a qual devolve um número aleatório no intervalo [0.0, 1.0[).<br>Escreva duas funções para gerar números aleatórios:<br><code>randomUntil</code>: fornece um número entre zero e menor que um número máximo dado no parâmetro<br><code>randomWithin</code>: fornece um número entre um mínimo e um máximo (intervalo fechado) dados nos parâmetros</div>\n<div><em>Exemplos:</em>\n  <ul>\n    <li><a href=\"#\" class=\"example\" invocation=\"randomUntil(10)\"'>randomUntil</a>(10) &rarr; 9</li>\n    <li><a href=\"#\" class=\"example\" invocation=\"randomWithin(0, 5)\"'>randomWithin</a>(0, 5) &rarr; 2</li>\n  </ul>\n</div>\n",
    "required" : true,
    "startCode" : "class RandomInts {\n    static int random() {\n        return (int) (Math.random() * 1000000);\n    }\n\n    static int randomUntil(int max) {\n        return 0; // TODO\n    }\n\n    static int randomWithin(int min, int max) {\n        return 0; // TODO\n    }\n}",
    "solutions" : [ "class RandomInts {\n    static int random() {\n        return (int) (Math.random() * 1000000);\n    }\n\n    static int randomUntil(int max) {\n        assert max > 0;\n        return (int) (Math.random() * max);\n    }\n\n    static int randomWithin(int min, int max) {\n        assert min < max;\n        return min + randomUntil(max - min + 1);\n    }\n}" ],
    "freezeTop" : 4,
    "freezeBottom" : 1,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : "randomUntil",
      "args" : [ 5 ],
      "expected" : {
        "type" : "rangecheck",
        "min" : 0,
        "max" : 4
      },
      "sideEffects" : null,
      "repeat" : 5,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "randomWithin",
      "args" : [ 5, 10 ],
      "expected" : {
        "type" : "rangecheck",
        "min" : 5,
        "max" : 10
      },
      "sideEffects" : null,
      "repeat" : 5,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "evenOddRandom",
    "type" : "JCLASS",
    "description" : "<div>Escreva duas funções para gerar números aleatórios, utilizando funções dos módulos anteriores.<br><code>randomEven</code>: fornece um número par até um dado máximo (inclusivé)<br><code>randomOdd</code>:  fornece um número ímpar até um dado máximo (inclusivé)</div>\n",
    "required" : false,
    "startCode" : "class EvenOddRandom {\n\n}",
    "solutions" : [ "class EvenOddRandom {\n    static int randomEven(int max) {\n        int n = RandomInts.randomUntil(max);\n        return EvenOdd.isEven(n) ? n : n + 1;\n    }\n    static int randomOdd(int max) {\n        int n = RandomInts.randomUntil(max);\n        return EvenOdd.isOdd(n) ? n : n + 1;\n    }\n}" ],
    "freezeTop" : 1,
    "freezeBottom" : 1,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ {
      "module" : null,
      "exercise" : "randomInts"
    }, {
      "module" : null,
      "exercise" : "oddIsNotEven"
    } ],
    "tests" : [ {
      "name" : "randomEven",
      "args" : [ 100 ],
      "expected" : {
        "type" : "evencheck",
        "even" : true
      },
      "sideEffects" : null,
      "repeat" : 5,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "randomEven",
      "args" : [ 100 ],
      "expected" : {
        "type" : "rangecheck",
        "min" : 0,
        "max" : 100
      },
      "sideEffects" : null,
      "repeat" : 5,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "randomOdd",
      "args" : [ 100 ],
      "expected" : {
        "type" : "evencheck",
        "even" : false
      },
      "sideEffects" : null,
      "repeat" : 5,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "randomOdd",
      "args" : [ 100 ],
      "expected" : {
        "type" : "rangecheck",
        "min" : 0,
        "max" : 100
      },
      "sideEffects" : null,
      "repeat" : 5,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "isPerfectSquare",
    "type" : "JFUNCTION",
    "description" : "<div>Escreva uma função para verificar se um número inteiro é um quadrado perfeito\n(i.e. a sua raiz quadrada é um número inteiro). Para tal, podem ser utilizadas\nas funções <code>sqrt</code> e <code>floor</code> do módulo <code>Math</code>, para calcular a raiz quadrada e\no piso de um número real.</div>\n<div><em>Exemplos:</em>\n  <ul>\n    <li>Math.<a href=\"#\" class=\"example\" invocation=\"Math.sqrt(9)\"'>sqrt</a>(9) &rarr; 3.0</li>\n    <li>Math.<a href=\"#\" class=\"example\" invocation=\"Math.floor(3.2)\"'>floor</a>(3.2) &rarr; 3.0</li>\n  </ul>\n</div>\n",
    "required" : true,
    "startCode" : "boolean isPerfectSquare(int n) {\n\n}",
    "solutions" : [ "boolean isPerfectSquare(int n) {\n     double sqrt = Math.sqrt(n);\n     return sqrt == Math.floor(sqrt);\n }" ],
    "freezeTop" : 1,
    "freezeBottom" : 1,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : "isPerfectSquare",
      "args" : [ 9 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isPerfectSquare",
      "args" : [ 12 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "divisorsModule",
    "type" : "JCLASS",
    "description" : "<div>Escreva um módulo com três funções relacionadas com divisores:<br><code>countDivisors</code>: conta quantos divisores tem um número inteiro;<br><code>sumProperDivisors</code>: soma os divisores <em>próprios</em> de um número inteiro (exclui o próprio);<br><code>isPrime</code>: verifica se um número é primo.</div>\n<div><em>Exemplos:</em>\n  <ul>\n    <li><a href=\"#\" class=\"example\" invocation=\"countDivisors(8)\"'>countDivisors</a>(8) &rarr; &quot;4   (1, 2, 4, 8)&quot;</li>\n    <li><a href=\"#\" class=\"example\" invocation=\"sumProperDivisors(6)\"'>sumProperDivisors</a>(6) &rarr; &quot;6   (1 + 2 + 3)&quot;</li>\n    <li><a href=\"#\" class=\"example\" invocation=\"isPrime(7)\"'>isPrime</a>(7) &rarr; true</li>\n  </ul>\n</div>\n",
    "required" : true,
    "startCode" : "class Divisors {\n\n}",
    "solutions" : [ "class Divisors {\n    static int countDivisors(int n) {\n        int d = 1;\n        int i = 1;\n        while(i <= n / 2) {\n            if(n % i == 0) {\n                d = d + 1;\n            }\n            i = i + 1;\n        }\n        return d;\n    }\n    static int sumProperDivisors(int n) {\n        int s = 0;\n        int i = 1;\n        while(i < n) {\n            if(n % i == 0) {\n                s = s + i;\n            }\n            i = i + 1;\n        }\n        return s;\n    }\n    static boolean isPrime(int n) {\n        if(n == 1) {\n            return false;\n        }\n        int i = 2;\n        while(i <= n / 2) {\n            if(n % i == 0) {\n                return false;\n            }\n            i = i + 1;\n        }\n        return true;\n    }\n}" ],
    "freezeTop" : 1,
    "freezeBottom" : 1,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ ],
    "tests" : [ {
      "name" : "countDivisors",
      "args" : [ 1 ],
      "expected" : {
        "type" : "result",
        "value" : 1
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "countDivisors",
      "args" : [ 7 ],
      "expected" : {
        "type" : "result",
        "value" : 2
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "countDivisors",
      "args" : [ 12 ],
      "expected" : {
        "type" : "result",
        "value" : 6
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "sumProperDivisors",
      "args" : [ 8 ],
      "expected" : {
        "type" : "result",
        "value" : 7
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "sumProperDivisors",
      "args" : [ 12 ],
      "expected" : {
        "type" : "result",
        "value" : 16
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isPrime",
      "args" : [ 1 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isPrime",
      "args" : [ 2 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isPrime",
      "args" : [ 8 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isPrime",
      "args" : [ 13 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isPrime",
      "args" : [ 21 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "primeNumbers",
    "type" : "JCLASS",
    "description" : "<div>Escreva um módulo com duas funções relacionadas com números primos:<br><code>countPrimes</code>: conta quantos números primos existem até um determinado número natural (inclusivé);<br><code>existsPrimeBetween</code>: verifica se existe algum primo entre dois números naturais (intervalo aberto).</div>\n<div><em>Exemplos:</em>\n  <ul>\n    <li><a href=\"#\" class=\"example\" invocation=\"countPrimes(7)\"'>countPrimes</a>(7) &rarr; 4</li>\n    <li><a href=\"#\" class=\"example\" invocation=\"existsPrimeBetween(5, 9)\"'>existsPrimeBetween</a>(5, 9) &rarr; true</li>\n  </ul>\n</div>\n",
    "required" : true,
    "startCode" : null,
    "solutions" : [ "class Primes {\n    static int countPrimes(int max) {\n        int i = 1;\n        int c = 0;\n        while(i <= max) {\n            if(Divisors.isPrime(i)) {\n                c = c + 1;\n            }\n            i = i + 1;\n        }\n        return c;\n    }\n    static boolean existsPrimeBetween(int min, int max) {\n        int i = min + 1;\n        while(i < max) {\n            if(Divisors.isPrime(i)) {\n                return true;\n            }\n            i = i + 1;\n        }\n        return false;\n    }\n}" ],
    "freezeTop" : 0,
    "freezeBottom" : 0,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ {
      "module" : null,
      "exercise" : "divisorsModule"
    } ],
    "tests" : [ {
      "name" : "countPrimes",
      "args" : [ 7 ],
      "expected" : {
        "type" : "result",
        "value" : 4
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "countPrimes",
      "args" : [ 15 ],
      "expected" : {
        "type" : "result",
        "value" : 6
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "countPrimes",
      "args" : [ 21 ],
      "expected" : {
        "type" : "result",
        "value" : 8
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "existsPrimeBetween",
      "args" : [ 5, 9 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "existsPrimeBetween",
      "args" : [ 31, 37 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "existsPrimeBetween",
      "args" : [ 12, 15 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "perfectNumbers",
    "type" : "JCLASS",
    "description" : "<div>Escreva um módulo com duas funções relacionadas com números perfeitos.\nUm número perfeito é aquele cuja soma dos divisores próprios é igual ao\npróprio número. Por exemplo, 6 é o primeiro número perfeito porque (1 + 2 + 3) é igual a 6.\nO perfeito seguinte é o 28 (1 + 2 + 4 + 7 + 14).<br><code>isPerfect</code>: verifica se um número é perfeito;<br><code>countPerfectNumbers</code>: conta quantos números perfeitos existem até um limite máximo.</div>\n<div><em>Exemplos:</em>\n  <ul>\n    <li><a href=\"#\" class=\"example\" invocation=\"isPerfect(6)\"'>isPerfect</a>(6) &rarr; true</li>\n    <li><a href=\"#\" class=\"example\" invocation=\"countPerfectNumbers(30)\"'>countPerfectNumbers</a>(30) &rarr; 2</li>\n  </ul>\n</div>\n",
    "required" : true,
    "startCode" : null,
    "solutions" : [ "class PerfectNumbers {\n    static boolean isPerfect(int n) {\n        return Divisors.sumProperDivisors(n) == n;\n    }\n    static int countPerfectNumbers(int max) {\n        int c = 0;\n        int i = 1;\n        while(i <= max) {\n            if(isPerfect(i)) {\n                c = c + 1;\n            }\n            i = i + 1;\n        }\n        return c;\n    }\n}" ],
    "freezeTop" : 0,
    "freezeBottom" : 0,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ {
      "module" : null,
      "exercise" : "divisorsModule"
    } ],
    "tests" : [ {
      "name" : "isPerfect",
      "args" : [ 28 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isPerfect",
      "args" : [ 12 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "isPerfect",
      "args" : [ 8 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "countPerfectNumbers",
      "args" : [ 30 ],
      "expected" : {
        "type" : "result",
        "value" : 2
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    }, {
      "name" : "countPerfectNumbers",
      "args" : [ 8 ],
      "expected" : {
        "type" : "result",
        "value" : 1
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  }, {
    "id" : "largestPrimeDiff",
    "type" : "JCLASS",
    "description" : "<div>Defina uma função que recebe como argumento um natural <code>max</code> e devolve a maior diferença entre dois números primos consecutivos até <code>max.</code></div>\n<div><em>Exemplos:</em>\n  <ul>\n    <li><a href=\"#\" class=\"example\" invocation=\"largestPrimeDiff(13)\"'>largestPrimeDiff</a>(13) &rarr; 4</li>\n  </ul>\n</div>\n",
    "required" : false,
    "startCode" : "class LargerPrimeDiff {\n\n}",
    "solutions" : [ "class LargerPrimeDiff {\n    static int largestPrimeDiff(int max) {\n        if(max <= 2) {\n            return 0;\n        }\n        int i = 3; // segundo primo\n        int last = 2; // primeiro primo\n        int largestDiff = i - last;\n        while(i <= max) {\n            if(Divisors.isPrime(i)) {\n                int d = i - last;\n                if(d > largestDiff) {\n                    largestDiff = d;\n                }\n                last = i;\n            }\n            i = i + 1;\n        }\n        return largestDiff;\n    }\n}" ],
    "freezeTop" : 1,
    "freezeBottom" : 1,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercises" : [ {
      "module" : null,
      "exercise" : "divisorsModule"
    } ],
    "tests" : [ {
      "name" : "largestPrimeDiff",
      "args" : [ 13 ],
      "expected" : {
        "type" : "result",
        "value" : 4
      },
      "sideEffects" : null,
      "repeat" : 1,
      "traceVars" : [ ],
      "traceCalls" : [ ],
      "checkVars" : [ ],
      "needsListener" : false
    } ]
  } ]
}
